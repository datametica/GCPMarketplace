apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  annotations:
    kubernetes-engine.cloud.google.com/icon: >-
      data:image/png;base64,{{ .Files.Get "logo.png" | b64enc }}
    marketplace.cloud.google.com/deploy-info: '{"partner_id": "click-to-deploy-containers", "product_id": {{ .Chart.Name | quote }}, "partner_name": "Google Click to Deploy"}'
spec:
  descriptor:
    type: Pelican
    version: "{{ .Values.pelican.image.tag }}"
    description: |-
      Migration to Cloud comes with the challenge of reconciling terabytes of data.
      Pelican validates the data from source to destination accurately at a granular level with zero data movement.
      This automation in data validation ensures confidence in decommissioning of existing Legacy Warehouses.

      # Support
      For support for this solution please connect to Datametica support team
      [official Datametica website](https://www.datametica.com//contact-us/).

    maintainers:
      - name: Datametica Pelican Team
        email: pelican@datametica.com
    links:
      - description: 'User Guide: Google Click to Deploy Pelican'
        url: https://github.com/datametica/GCPMarketplace/blob/master/pelican/README.md
    notes: |-
        ## Get authentication credentials for the cluster

        ```shell
        gcloud container clusters get-credentials [CLUSTER_NAME] --zone [CLUSTER_ZONE]
        ```
        where:
        * `[CLUSTER_NAME]` is the name of the cluster for this app
        * `[CLUSTER_ZONE]` is the zone in which the cluster is operating

        For more information, visit
        [the following documentation](https://cloud.google.com/kubernetes-engine/docs/quickstart#get_authentication_credentials_for_the_cluster).

        ## Open your Pelican! site
        To get the external IP of your Pelican! site, use the following command:

        ```
        SERVICE_IP=$(kubectl get svc {{ .Release.Name }}-web-service
        --namespace {{ .Release.Namespace }}
        --output jsonpath='{.status.loadBalancer.service[0].ip}')

        echo "https://${SERVICE_IP}/"

        ```

        ## Forward Pelican! port in local environment
        You can use the port forwarding feature of `kubectl` to forward Pelican!'s port to your local
        machine. Run the following command in the background:

        ```shell
        kubectl port-forward \
          --namespace {{ .Release.Namespace }} \
          svc/{{ .Release.Name }}-web-service \
          8080:80
        ```
        Now you can access the Pelican! UI with [http://localhost:8080](http://localhost:8080).
  info:
    - name: Note
      value: Please wait for 5 minutes after deployment to see Pelican login page.
    - name: Pelican
      type: Reference
      valueFrom:
        serviceRef:
          name: "{{ .Release.Name }}-web-service"
    - name: Forward Pelican Browser port locally
      value: kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ .Release.Name }}-web-service 8080:80
    - name: Pelican Browser (local only)
      value: http://localhost:8080/browser/
    - name: Pelican UI default credentials
      value: username= superuser@datametica.com password= admin
    - name: Database username
      value: username= pelicanuser
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
  componentKinds:
    - group: v1
      kind: ConfigMap
    - group: v1
      kind: Secret
    - group: v1
      kind: Service
    - group: v1
      kind: PersistentVolumeClaim
    - group: v1
      kind: Deployment
    - group: v1
      kind: StatefulSet

