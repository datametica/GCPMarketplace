apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  annotations:
    marketplace.cloud.google.com/deploy-info: '{"partner_id": "click-to-deploy-containers", "product_id": {{ .Chart.Name | quote }}, "partner_name": "Google Click to Deploy"}'
spec:
  descriptor:
    type: Raven
    version: "{{ .Values.raven.image.tag }}"
    description: |-
      Legacy Warehouses have complex processes and lengthy workloads. Converting these to Cloud requires
      meticulous manual effort and time which leads to increased cost. Raven assists by automating and
      accelerating translation of source workloads (ETL/ELT) to target workloads (ETL/ELT). This automation
      and acceleration of workload translation to Native Cloud Technologies helps save 70% of time as
      compared to traditional methods of data transfer.

      # Support
      Google does not offer support for this solution. However, community support is available on
      Additional support is available on the [official Datametica website](https://www.datametica.com//contact-us/).

    maintainers:
      - name: Google Click to Deploy
        url: https://cloud.google.com/solutions/#click-to-deploy
    links:
      - description: 'User Guide: Google Click to Deploy Raven'
        url: https://github.com/GoogleCloudPlatform/click-to-deploy/blob/master/k8s/raven/README.md
    notes: |-
      # Get authentication credentials for the cluster
        ```shell
        gcloud container clusters get-credentials [CLUSTER_NAME] --zone [CLUSTER_ZONE]
        ```
        where:
        * `[CLUSTER_NAME]` is the name of the cluster for this app
        * `[CLUSTER_ZONE]` is the zone in which the cluster is operating
        For more information, visit
        [the following documentation]
        (https://cloud.google.com/kubernetes-engine/docs/quickstart#get_authentication_credentials_for_the_cluster).
        {{ if .Values.enablePublicServiceAndIngress }}
        # Open your Raven! site
        To get the external IP of your Raven! site, use the following command:

        ```
        SERVICE_IP=$(kubectl get ingress {{ .Release.Name }}-raven-ingress \
          --namespace {{ .Release.Namespace }} \
          --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "https://${SERVICE_IP}/"
        ```

        The command outputs the URL of your site.
        # Update TLS certificate for Raven!
        By default, the app uses a self-signed certificate. You can follow the
        steps in the
        [Instructions for updating the TLS certificate for Raven!]
        (https://github.com/GoogleCloudPlatform/click-to-deploy/blob/master/k8s/raven/README.md#update-tls-certificate-for-raven)
        section to update it.
        {{ else }}
        # Open your Raven! site
        Raven! is exposed in a ClusterIP-only service, `{{ .Release.Name }}-raven`. To
        connect to the Raven! UI, you can either expose a public service endpoint, or keep it
        private, but connect from you local environment, with `kubectl port-forward`.
        ## Forward Raven! port in local environment
        You can use the port forwarding feature of `kubectl` to forward Raven!'s port to your local
        machine. Run the following command in the background:

        ```shell
        kubectl port-forward \
          --namespace {{ .Release.Namespace }} \
          svc/{{ .Release.Name }}-raven \
          8080:80
        ```
        Now you can access the Raven! UI with [http://localhost:8080](http://localhost:8080).
        {{ end }}
  info:
    - name: Raven
      type: Reference
      valueFrom:
        serviceRef:
          name: "{{ .Release.Name }}-raven"
    - name: Forward Raven Browser port locally
      value: kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ .Release.Name }}-raven 8080:80
    - name: Raven Browser (local only)
      value: http://localhost:8080/browser/
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
  componentKinds:
    - group: v1
      kind: ConfigMap
    - group: v1
      kind: Secret
    - group: v1
      kind: Service
    - group: v1
      kind: PersistentVolumeClaim
    - group: apps/v1
      kind: StatefulSet
    - group: v1
      kind: Deployment
   
